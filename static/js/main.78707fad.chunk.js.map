{"version":3,"sources":["components/NoGo.js","components/Listing.js","components/List.js","components/FilterPanel.js","components/HamburgerBar.js","Utilities.js","App.js","serviceWorker.js","index.js"],"names":["NoGo","state","this","props","appGreenLight","react_default","a","createElement","aria-label","className","tabIndex","message","Component","Listing","key","shortid","generate","onClick","e","onFilteredTipListItemClick","name","onKeyPress","List","filteredTips","map","l","components_Listing","short_name_key","location_name","FilterPanel","componentDidMount","handleFilterChange","_this","onFilterChange","target","value","id","onChange","components_List","HamburgerBar","document","querySelector","classList","toggle","stopPropagation","handleClick","index_es","icon","color","status","response","Promise","resolve","reject","Error","statusText","json","makeMarkerIcon","markerColor","window","google","maps","MarkerImage","Size","Point","library","add","faBars","App","selectedFilterValue","dfwTips","activeMarkerStack","infoContentStack","realFilterValue","fetch","then","Utilities","data","newState","Object","assign","setState","googleMapsPromise","resolveGoogleMapsPromise","script","src","concat","async","body","appendChild","all","moreData","initMapWithMarkers","catch","error","newValue","Map","getElementById","center","lat","lng","zoom","mapTypeControl","infoWindow","InfoWindow","filterValue","filter","tip","short_cat_key","newStateTwo","infoString","rudy_says_tip","address","search_on_google","droppedIcon","mousedOverIcon","marker","Marker","position","title","animation","Animation","DROP","push","contentString","addListener","setIcon","setContent","open","clickItemName","length","m","event","trigger","components_FilterPanel","liveFilterCategory","components_NoGo","components_HamburgerBar","role","href","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.78707fad.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * A class that presents basic/'graceful' error message to the user\n */\nclass NoGo extends Component {\n  state = {}\n\n  render(){\n      if (this.props.appGreenLight) {\n          return null;\n      } else {\n          return (\n              <div aria-label=\"page-not-ready-error-reload\"\n                  className=\"do_not_start_error\"\n              >\n                  <p tabIndex=\"0\" className=\"error_intro\">\n                  Not this time! ***Please try again by reloading page.*** Curious?\n                   This is what we know...\n                  </p>\n                  <p tabIndex=\"0\" className=\"error_message\"> {this.props.message}</p>\n              </div>\n          );\n      }\n  }\n}\n\nNoGo.propTypes = {\n    message: PropTypes.string,\n    appGreenLight: PropTypes.bool.isRequired\n};\n\nexport default NoGo;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport shortid from 'shortid';\n\nfunction Listing(props){\n    return (\n        <div className=\"listing\"\n            tabIndex=\"0\"\n            key={shortid.generate()}\n            onClick={(e) => {props.onFilteredTipListItemClick(props.name, e);}}\n            onKeyPress={(e) => {props.onFilteredTipListItemClick(props.name, e);}}\n        >{props.name}</div>\n    );\n}\n\nListing.propTypes = {\n    name: PropTypes.string.isRequired,\n    onFilteredTipListItemClick: PropTypes.func.isRequired\n};\n\nexport default Listing;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Listing from './Listing';\n\nfunction List(props){\n    return (\n        <div className=\"list\">\n            {props.filteredTips.map(l =>\n                <Listing\n                    key={l.short_name_key}\n                    name={l.location_name}\n                    onFilteredTipListItemClick={\n                        props.onFilteredTipListItemClick}\n                />)}\n        </div>\n    );\n}\n\nList.propTypes = {\n    filteredTips: PropTypes.array.isRequired,\n    onFilteredTipListItemClick: PropTypes.func.isRequired\n};\n\nexport default List;\n","import React, {Component} from 'react';\nimport List from './List';\nimport PropTypes from 'prop-types';\n\n/**\n * A class that present a selection of categories from with which to filter\n * A clickalbe list of live marker titles represented on the map\n * Clicking on the list animates the corresponding map marker\n */\nclass FilterPanel extends Component {\n  state = {\n  }\n  componentDidMount = () => {\n  }\n\n  /**\n   * It triggers the filter change method passed down\n   */\n  handleFilterChange = (e) => {\n      this.props.onFilterChange(e.target.value);\n  }\n\n  render(){\n      return (\n          <nav className=\"drawer, dark_blue\"\n              id=\"drawer\"\n          >\n              <div className=\"drawer-filter-options\">\n                  <select\n                      tabIndex=\"0\"\n                      id=\"drawer-filter-selector\"\n                      name=\"drawer-filter-selected-category\"\n                      onChange={this.handleFilterChange}\n                  >\n                      <option tabIndex=\"0\" value=\"all\">All Categories</option>\n                      <option tabIndex=\"0\" value=\"bbq\">Eat BBQ</option>\n                      <option tabIndex=\"0\" value=\"liv\">Live Entertainment</option>\n                      <option tabIndex=\"0\" value=\"mov\">Watch a Movie</option>\n                      <option tabIndex=\"0\" value=\"air\">Where`s The Airport</option>\n                  </select>\n              </div>\n              <ul id=\"filtered-tip-list\" className=\"filtered-tip-list\">\n                  <List filteredTips={ this.props.filteredTips }\n                      onFilteredTipListItemClick={\n                          this.props.onFilteredTipListItemClick}\n                  />\n              </ul>\n          </nav>\n      );\n  }\n\n}\n\nFilterPanel.propTypes = {\n    onFilterChange: PropTypes.func.isRequired,\n    onFilteredTipListItemClick: PropTypes.func.isRequired,\n    filteredTips: PropTypes.array.isRequired,\n    activeMarkerStack: PropTypes.array.isRequired,\n    liveFilterCategory: PropTypes.string.isRequired\n};\n\nexport default FilterPanel;\n","import React, {Component} from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n/**\n * A class that presents the title and menu icon from which to open\n * the sidebar panel if it is not already open //TODO: should it toggle open/cl?\n */\nclass HamburgerBar extends Component {\n  state = {\n  }\n  componentDidMount () {\n  }\n\n  /**\n   * It opens or closes the filter sidebar ONLY when it is not already opens\n   * becuase screen size allows\n   */\n  handleClick(e) {\n      // media queries keep sidebar open unless under a certain size\n      // when closed, activating will open or close\n      document.querySelector('nav#drawer').classList.toggle('open');\n      e.stopPropagation();\n  }\n  render(){\n      return (\n          <div className=\"hamburger-title\"\n              onClick={this.handleClick}\n          >\n              <FontAwesomeIcon\n                  tabIndex=\"0\"\n                  icon=\"bars\"\n                  color=\"#099dd9\"\n                  // size=\"lg\"\n                  className=\"hamburger\"\n                  id=\"hamburger-one\"\n                  onClick={this.handleClick}\n              />dfwTips - Where to go!\n          </div>\n      );\n  }\n\n}\n\nexport default HamburgerBar;\n","//Common functions to support Components\n// see https://developers.google.com/web/updates/2015/03/introduction-to-fetch\n/**\n * a call back used in a chained fetch, it resolves or rejects a fetch it's\n * chained to by examining the status value of the 'response' object\n * fetch(url).then(useHere).then(parseJson).then(dataCB).catch(errorCB)\n * @param { object } - stream object response from fetch call.\n * see https://streams.spec.whatwg.org/\n * @return { string } - response to thenable or statusText\n */\nexport const status = response => {\n    if (response.status >= 200 && response.status < 300) {\n        return Promise.resolve(response);\n    } else {\n        return Promise.reject(new Error(response.statusText));\n    }\n};\n\n/**\n * a call back used in a chained fetch\n * fetch(url).then(useHere).then(parseJson).then(dataCB).catch(errorCB)\n * @param { response } - thenable from stream object response of upstream fetch\n * @return { object } - json\n */\nexport const json = response => {\n    return response.json();\n};\n\n/**\n * This function loads the google api and returns a promise\n * Credit: Ryan Waite youtube coding\n * session https://www.youtube.com/watch?v=5J6fs_BlVC0&t=1298s\n * @return { object } - promise\n */\nexport function loadGoogleMapsPromise () {\n    return new Promise(function(resolve, reject) {\n        window.resolveGoogleMapsPromise = function() {\n            resolve(window.google);\n            //clean up\n            delete window.resolveGoogleMapsPromise;\n        };\n        // load the API\n        const script = document.createElement('script');\n        const API_KEY = `AIzaSyBQF4afYXb3lcv9KcI6BforUA1YfFBWank`;\n        script.src = `https://maps.googleapis.com/maps/api/js?&key=${API_KEY}&callback=resolveGoogleMapsPromise`;\n        script.async = true;\n        document.body.appendChild(script);\n    });\n}\n\n/**\n * This function takes in a COLOR, and then creates a new marker\n * icon of that color. The icon will be 21 px wide by 34 high, have an origin\n * of 0, 0 and be anchored at 10, 34).\n * credit: 'Project_Code_5_BeingStylish.html in ud864 on GitHub from course'\n */\nexport function makeMarkerIcon(markerColor) {\n    var markerImage = new window.google.maps.MarkerImage(\n        'http://chart.googleapis.com/chart?chst=d_map_spin&chld=1.15|0|'+\n        markerColor + '|40|_|%E2%80%A2',\n        new window.google.maps.Size(21, 34),\n        new window.google.maps.Point(0, 0),\n        new window.google.maps.Point(10, 34),\n        new window.google.maps.Size(21,34)\n    );\n    return markerImage;\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport NoGo from './components/NoGo';\nimport FilterPanel from './components/FilterPanel';\nimport HamburgerBar from './components/HamburgerBar';\nimport * as Utilities from './Utilities';\n// Load our icons\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faBars);\n\n/**\n * A class that returns the \"dfwTips\" React single page app\n */\nclass App extends Component {\n  state = {\n      message: \"Nothing to say yet.\",\n      appGreenLight: true,\n      selectedFilterValue: \"all\",\n      dfwTips: [],\n      filteredTips: [],\n      activeMarkerStack: [],\n  }\n\n  /**\n   * A lifecycle method that run once per lifecycle after this component and all\n   * sub-components have rendered properly\n   */\n  componentDidMount = () => {\n      this.activeMarkerStack = [];\n      this.infoContentStack = [];\n      this.filteredTips = [];\n      this.realFilterValue = \"all\";//see lesson learned notes 13\n\n      //Get tips from a json API 'dfwTipsAPI'\n      fetch('https://rudimusmaximus.github.io/dfwTips/dfwTipsAPI.json')\n          .then(Utilities.status)\n          .then(Utilities.json)\n          .then(data => {\n\n              // create a new \"state\" object without mutating\n              // the original state object. see readme for\n              // credit to for this binding/loading data approach\n              // https://www.andreasreiterer.at/connect-react-app-rest-api/\n              const newState = Object.assign({}, this.state, {\n                  dfwTips: data\n              });\n              //load the tips so we can make markers from them\n              //also triggers new render\n              this.setState(newState);\n              // console.log(`dfwTips data loaded into state.`);\n              let googleMapsPromise = Utilities.loadGoogleMapsPromise();\n              Promise.all([\n                  googleMapsPromise\n                  // future additional 3rd party info apis\n              ])\n                  .then(moreData => {\n                      let google = moreData[0];//the first return (only one for now)\n                      this.google = google; //keep google related out of state\n                      //Load it with markers made from the tips fetched above\n                      window.initMapWithMarkers = this.initMapWithMarkers;\n                      this.initMapWithMarkers();\n                  });\n          })\n          .catch(error => {\n              let eMessage = 'Problem loading APIs';\n              // console.log(`Request failed: `, error);\n              this.setState((state) => {\n                  return { message: eMessage };\n              });\n              this.setState((state) => {\n                  return { appGreenLight: false };\n              });\n          });\n  }\n\n  /**\n   * It updates the filter value in two places and runs the initMapWithMarkers\n   */\n  onFilterChange = (newValue) => {\n      this.realFilterValue = newValue;\n      this.setState((state) => {\n          return {selectedFilterValue: newValue};\n      });\n      this.initMapWithMarkers();\n  }\n\n  /**\n   * It uses loaded google maps api to create a map with active markers\n   * and information windows based on the tips retrieved\n   */\n  initMapWithMarkers = () => {\n      this.activeMarkerStack = [];\n\n      // create map with starting center and zoom\n      this.map = new window.google.maps.Map(document.getElementById('map'), {\n          center: {\n              lat: 32.7603,\n              lng: -97.047797\n          },\n          zoom: 10,\n          mapTypeControl: false\n      });\n\n      // pop up info window\n      this.infoWindow = new window.google.maps.InfoWindow();\n\n      //filter by active selection if necessary\n      let filterValue = this.state.selectedFilterValue;\n      filterValue = this.realFilterValue;//see note 13, managing locally\n      this.filteredTips = [];\n      if (filterValue === \"all\") { //use them all\n          this.filteredTips = this.state.dfwTips;\n      } else { // Just get the ones in the active selection\n          this.filteredTips = this.state.dfwTips.filter(function(tip) {\n              return (tip.short_cat_key === filterValue);\n          });\n      }\n      const newStateTwo = Object.assign({}, this.state, {\n          filteredTips: this.filteredTips\n      });\n      this.setState(newStateTwo);\n\n      //use our JSON api data to create markers\n      this.filteredTips.map((tip) => {\n          //content for the info window\n          const infoString =\n            `<div aria-label=\"Info window for the listing just clicked on map or in filter list.\" id=\"content\">\n              <div id=\"dfwTipsInfowindow\">\n              <h1 tabIndex=\"0\" id=\"firstHeading\">${tip.location_name}</h1>\n              <div id=\"bodyContent\">\n                <p tabIndex=\"0\"><em>Our tip: </em>${tip.rudy_says_tip}</p>\n                <p tabIndex=\"0\"><em>Tell the driver: </em>${tip.address}</p>\n                <a tabIndex=\"0\" aria-label=\"search link\" className = \"search-link\" href = \"${tip.search_on_google}\"\n                >Google it now</a>\n              </div>\n            </div>`;\n          //styles for marker default and mouse over highlight\n          //inspired by project code 5 being stylish course material\n          var droppedIcon = Utilities.makeMarkerIcon('0091ff');\n          var mousedOverIcon = Utilities.makeMarkerIcon('FFFF24');\n          const marker = new window.google.maps.Marker({\n              position: {\n                  lat: tip.lat,\n                  lng: tip.lng\n              },\n              map: this.map,\n              title: tip.location_name,\n              animation: window.google.maps.Animation.DROP,\n              icon: droppedIcon,\n              id: tip.short_name_key\n          });\n          this.activeMarkerStack.push(marker);//save marker to list\n          this.infoContentStack.push({id: marker.id,\n              contentString: infoString\n          });\n          //setup marker event handlers\n          marker.addListener(`mouseover`, function () {\n              this.setIcon(mousedOverIcon);\n          });\n          marker.addListener(`mouseout`, function () {\n              this.setIcon(droppedIcon);\n          });\n          marker.addListener('click', () => {\n              this.infoWindow.setContent(infoString);\n              this.infoWindow.open(this.map, marker);\n          });\n          return null;\n      });\n\n      this.setState((state) => {\n          return { activeMarkerStack: this.activeMarkerStack };\n      });\n  } //end initMapWithMarkers\n\n  /**\n   * It replicates the click action of a marker click when same marker is clicked\n   * as listing in filter panel\n   */\n   onFilteredTipListItemClick = (clickItemName, e) => {\n       //will be called from listing clicks\n       if (this.activeMarkerStack.length > 0 && clickItemName){\n           //get the right marker with only the item click item name\n           //this matches the marker titles when they were created\n           let m = this.activeMarkerStack\n               .filter(m => m.title === clickItemName)[0];\n           //simulate a marker click, so it's event listener animates\n           //marker by opening it's information window\n           window.google.maps.event.trigger(m, 'click');\n       }\n       // media queries keep sidebar open unless under a certain size\n       // when closed, activating will open or close\n       document.querySelector('nav#drawer').classList.toggle('open');\n       e.stopPropagation();\n\n   }\n\n   render() {\n       return (\n           <div id = \"body-two\">\n               <FilterPanel\n                   onFilterChange={this.onFilterChange}\n                   onFilteredTipListItemClick={this.onFilteredTipListItemClick}\n                   filteredTips={this.state.filteredTips}\n\n                   // activeMarkerStack={this.state.activeMarkerStack}\n                   activeMarkerStack={this.activeMarkerStack || []}\n                   liveFilterCategory={this.state.selectedFilterValue}\n               />\n               <main className = \"main, light_blue\">\n                   <NoGo message = { this.state.message }\n                       appGreenLight = { this.state.appGreenLight }\n                   />\n                   <HamburgerBar />\n                   <div tabIndex=\"0\" aria-label=\"locations-on-a-google-map\" role=\"application\" id=\"map\"> </div>\n                   <footer tabIndex=\"0\" aria-label=\"footer-with-source-data-credits\" className = \"footer\"\n                       id = \"footer\"\n                   >\n                       <a className = \"footer-link\"\n                           href = \"https://github.com/rudimusmaximus/dfwTips\"\n                       >featuring dfwTips\n                       </a>\n                   </footer>\n               </main>\n           </div>\n       );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}